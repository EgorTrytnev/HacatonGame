using UnityEngine;
using System;

/// <summary>
/// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π UnitFSM —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
/// –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/// </summary>
public class UnitFSM : MonoBehaviour
{
    [Header("–ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç—ã")]
    public AudioClip[] responseClips;
    
    [Header("–ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    public bool respondToVoice = true;
    public float responseDelay = 0.5f;

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π")]
    public float moveSpeed = 3f;
    public float maxAwaitingTime = 10f;

    private AudioSource _audioSource;
    [HideInInspector] public string unitId;
    private BaseState currentState;
    private static int _nextId = 1;
    private bool _nameLogged = false;
    private VoiceSystemManager _voiceSystemManager;

    // –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —é–Ω–∏—Ç–∞
    public event Action OnUnitDestroyed;
    public event Action<string> OnCommandReceived;
    public event Action<BaseState, BaseState> OnStateChanged;

    void Awake()
    {
        unitId = "Unit_" + _nextId++;
        _audioSource = GetComponent<AudioSource>();
        
        if (_audioSource == null)
        {
            _audioSource = gameObject.AddComponent<AudioSource>();
            _audioSource.playOnAwake = false;
            _audioSource.spatialBlend = 1f; // 3D –∑–≤—É–∫
        }
    }

    void Start()
    {
        // –ù–∞—Ö–æ–¥–∏–º VoiceSystemManager –≤–ª–∞–¥–µ–ª—å—Ü–∞ —é–Ω–∏—Ç–∞
        var player = FindLocalPlayer();
        if (player != null)
        {
            _voiceSystemManager = player.GetComponent<VoiceSystemManager>();
        }

        if (_voiceSystemManager == null)
        {
            Debug.LogError("VoiceSystemManager –Ω–µ –Ω–∞–π–¥–µ–Ω! –Æ–Ω–∏—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
            respondToVoice = false;
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        VoiceCommandBroadcaster.OnCommandReceived += OnVoiceCommand;
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        TransitionTo(new IdleState(this));
    }

    void Update()
    {
        currentState?.OnUpdate();

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–º—è –û–î–ò–ù –†–ê–ó, –∫–æ–≥–¥–∞ –æ–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ
        if (!_nameLogged && _voiceSystemManager != null)
        {
            string myName = _voiceSystemManager.GetUnitName(unitId);
            if (!string.IsNullOrEmpty(myName))
            {
                Debug.Log($"‚úÖ –Ø ‚Äî {myName} (ID: {unitId})");
                _nameLogged = true;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        if (_voiceSystemManager != null && respondToVoice)
        {
            bool isAwaiting = _voiceSystemManager.GetAwaitingUnits().Contains(unitId);
            if (isAwaiting && !(currentState is AwaitingCommandState))
            {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ—Ä–≤–∞–Ω–æ
                if (currentState == null || currentState.CanBeInterrupted())
                {
                    var awaitingState = new AwaitingCommandState(this);
                    awaitingState.SetMaxAwaitingTime(maxAwaitingTime);
                    TransitionTo(awaitingState);
                }
            }
        }
    }

    /// <summary>
    /// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    /// </summary>
    public void TransitionTo(BaseState newState)
    {
        BaseState oldState = currentState;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if (oldState != null && newState != null && 
            oldState.GetPriority() > newState.GetPriority() && 
            !oldState.CanBeInterrupted())
        {
            Debug.Log($"‚ö†Ô∏è {unitId}: –ù–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –∫ {newState.GetStateName()}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {oldState.GetStateName()} –∏–º–µ–µ—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç");
            return;
        }

        currentState?.OnExit();
        currentState = newState;
        currentState?.OnEnter();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        OnStateChanged?.Invoke(oldState, newState);
        
        string oldStateName = oldState?.GetStateName() ?? "None";
        string newStateName = newState?.GetStateName() ?? "None";
        Debug.Log($"üîÑ {unitId}: {oldStateName} ‚Üí {newStateName}");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    /// </summary>
    void OnVoiceCommand(string targetId, string[] actions)
    {
        if (targetId != unitId || !respondToVoice) return;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        _voiceSystemManager?.SetAwaitingCommand(unitId, false);

        foreach (string action in actions)
        {
            OnCommandReceived?.Invoke(action);
            ExecuteAction(action);
        }

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        if (responseClips != null && responseClips.Length > 0)
        {
            Invoke(nameof(PlayRandomResponse), responseDelay);
        }
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    /// </summary>
    void ExecuteAction(string action)
    {
        switch (action)
        {
            case "GoToBase":
                GoToPoint("Point_Base");
                break;
                
            case "GoToMid":
                GoToPoint("Point_Mid");
                break;
                
            case "GoToLair":
                GoToPoint("Point_Lair");
                break;
                
            case "Patrol":
                StartPatrolling();
                break;
                
            case "Guard":
                StartGuarding();
                break;
                
            case "Return":
                ReturnToPlayer();
                break;

            case "Stop":
                TransitionTo(new IdleState(this));
                break;
                
            default:
                Debug.LogWarning($"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è {unitId}: {action}");
                break;
        }
    }

    /// <summary>
    /// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
    /// </summary>
    void GoToPoint(string pointName)
    {
        GameObject point = GameObject.Find(pointName);
        if (point == null)
        {
            Debug.LogError($"‚ùå –¢–æ—á–∫–∞ '{pointName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return;
        }

        var moveState = new MoveToPointState(this, point.transform.position, pointName);
        moveState.SetSpeed(moveSpeed);
        TransitionTo(moveState);
    }

    /// <summary>
    /// –ù–∞—á–∞–ª–æ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    /// </summary>
    void StartPatrolling()
    {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫–∏ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        var patrolPoints = GameObject.FindGameObjectsWithTag("PatrolPoint");
        if (patrolPoints.Length > 0)
        {
            TransitionTo(new PatrolState(this, patrolPoints));
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è –¢–æ—á–∫–∏ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —Å–ª—É—á–∞–π–Ω–æ–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            TransitionTo(new RandomPatrolState(this));
        }
    }

    /// <summary>
    /// –ù–∞—á–∞–ª–æ –æ—Ö—Ä–∞–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
    /// </summary>
    void StartGuarding()
    {
        TransitionTo(new GuardState(this, transform.position));
    }

    /// <summary>
    /// –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–≥—Ä–æ–∫—É
    /// </summary>
    void ReturnToPlayer()
    {
        var player = FindLocalPlayer();
        if (player != null)
        {
            TransitionTo(new FollowState(this, player.transform));
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }

    /// <summary>
    /// –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞ —é–Ω–∏—Ç–æ–≤)
    /// </summary>
    GameObject FindLocalPlayer()
    {
        var players = FindObjectsOfType<PlayerController>();
        foreach (var player in players)
        {
            var pv = player.GetComponent<Photon.Pun.PhotonView>();
            if (pv != null && pv.IsMine)
            {
                return player.gameObject;
            }
        }
        return null;
    }

    /// <summary>
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç–∞
    /// </summary>
    public void PlayRandomResponse()
    {
        if (responseClips == null || responseClips.Length == 0)
        {
            Debug.LogWarning($"–ù–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —É —é–Ω–∏—Ç–∞ {unitId}");
            return;
        }

        AudioClip clip = responseClips[UnityEngine.Random.Range(0, responseClips.Length)];
        _audioSource.PlayOneShot(clip);
        
        Debug.Log($"üîä {unitId} –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —é–Ω–∏—Ç–∞
    /// </summary>
    public string GetCurrentStateName()
    {
        return currentState?.GetStateName() ?? "None";
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ —é–Ω–∏—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    /// </summary>
    public bool CanReceiveCommands()
    {
        return respondToVoice && _voiceSystemManager != null;
    }

    /// <summary>
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    /// </summary>
    public void SetVoiceControlEnabled(bool enabled)
    {
        respondToVoice = enabled;
        
        if (!enabled && _voiceSystemManager != null)
        {
            _voiceSystemManager.SetAwaitingCommand(unitId, false);
        }
        
        Debug.Log($"üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è {unitId}: {(enabled ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–æ—Ç–∫–ª—é—á–µ–Ω–æ")}");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
    /// </summary>
    public BaseState GetCurrentState()
    {
        return currentState;
    }

    /// <summary>
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è
    /// </summary>
    public void ForceStop()
    {
        TransitionTo(new IdleState(this));
    }

    void OnDisable()
    {
        VoiceCommandBroadcaster.OnCommandReceived -= OnVoiceCommand;
        currentState?.OnExit();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
        OnUnitDestroyed?.Invoke();
    }
}

// ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø =====

/// <summary>
/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
/// </summary>
public class PatrolState : BaseState
{
    private GameObject[] patrolPoints;
    private int currentPointIndex = 0;
    private MoveToPointState moveState;

    public PatrolState(UnitFSM fsm, GameObject[] points) : base(fsm)
    {
        patrolPoints = points;
    }

    public override void OnEnter()
    {
        Debug.Log($"üö∂ {unit.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É {patrolPoints.Length} —Ç–æ—á–∫–∞–º–∏");
        MoveToNextPoint();
    }

    public override void OnUpdate()
    {
        moveState?.OnUpdate();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã —Ç–æ—á–∫–∏
        if (moveState != null && Vector3.Distance(unit.transform.position, moveState.GetTargetPosition()) < 0.5f)
        {
            MoveToNextPoint();
        }
    }

    private void MoveToNextPoint()
    {
        if (patrolPoints.Length == 0) return;
        
        currentPointIndex = (currentPointIndex + 1) % patrolPoints.Length;
        Vector3 nextPoint = patrolPoints[currentPointIndex].transform.position;
        moveState = new MoveToPointState(fsm, nextPoint, $"PatrolPoint_{currentPointIndex}");
        moveState.OnEnter();
    }

    public override int GetPriority()
    {
        return 4;
    }
}

/// <summary>
/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
/// </summary>
public class RandomPatrolState : BaseState
{
    private Vector3 basePosition;
    private float patrolRadius = 5f;
    private MoveToPointState moveState;

    public RandomPatrolState(UnitFSM fsm) : base(fsm)
    {
        basePosition = unit.transform.position;
    }

    public override void OnEnter()
    {
        Debug.Log($"üîÄ {unit.name} –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ");
        MoveToRandomPoint();
    }

    public override void OnUpdate()
    {
        moveState?.OnUpdate();
        
        if (moveState != null && Vector3.Distance(unit.transform.position, moveState.GetTargetPosition()) < 0.5f)
        {
            MoveToRandomPoint();
        }
    }

    private void MoveToRandomPoint()
    {
        Vector2 randomOffset = UnityEngine.Random.insideUnitCircle * patrolRadius;
        Vector3 randomPoint = basePosition + new Vector3(randomOffset.x, randomOffset.y, 0);
        moveState = new MoveToPointState(fsm, randomPoint, "RandomPoint");
        moveState.OnEnter();
    }

    public override int GetPriority()
    {
        return 3;
    }
}

/// <summary>
/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ö—Ä–∞–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
/// </summary>
public class GuardState : BaseState
{
    private Vector3 guardPosition;
    private float guardRadius = 2f;

    public GuardState(UnitFSM fsm, Vector3 position) : base(fsm)
    {
        guardPosition = position;
    }

    public override void OnEnter()
    {
        Debug.Log($"üõ°Ô∏è {unit.name} –æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é");
    }

    public override void OnUpdate()
    {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –æ—Ç–æ—à–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
        if (Vector3.Distance(unit.transform.position, guardPosition) > guardRadius)
        {
            Vector3 direction = (guardPosition - unit.transform.position).normalized;
            unit.transform.position += direction * 2f * Time.deltaTime;
        }
    }

    public override int GetPriority()
    {
        return 6;
    }
}

/// <summary>
/// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ü–µ–ª—å—é
/// </summary>
public class FollowState : BaseState
{
    private Transform target;
    private float followDistance = 2f;

    public FollowState(UnitFSM fsm, Transform target) : base(fsm)
    {
        this.target = target;
    }

    public override void OnEnter()
    {
        Debug.Log($"üë• {unit.name} —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Ü–µ–ª—å—é");
    }

    public override void OnUpdate()
    {
        if (target == null)
        {
            fsm.TransitionTo(new IdleState(fsm));
            return;
        }

        float distance = Vector3.Distance(unit.transform.position, target.position);
        if (distance > followDistance)
        {
            Vector3 direction = (target.position - unit.transform.position).normalized;
            unit.transform.position += direction * 3f * Time.deltaTime;
        }
    }

    public override int GetPriority()
    {
        return 7;
    }
}