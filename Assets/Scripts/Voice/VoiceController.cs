using System;
using UnityEngine;
using System.Runtime.InteropServices;

/// <summary>
/// –õ–æ–∫–∞–ª—å–Ω—ã–π VoiceController –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
/// –ó–∞–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π Singleton –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
/// </summary>
public class VoiceController : MonoBehaviour
{
    [DllImport("trr_lib", CallingConvention = CallingConvention.Cdecl)]
    private static extern void StartTranscription(string vadModelPath, string asrModelPath);

    [DllImport("trr_lib", CallingConvention = CallingConvention.Cdecl)]
    private static extern void StopTranscription();

    [DllImport("trr_lib", CallingConvention = CallingConvention.Cdecl)]
    private static extern bool HasTranscribedText();

    [DllImport("trr_lib", CallingConvention = CallingConvention.Cdecl)]
    private static extern IntPtr GetNextTranscribedText();

    [DllImport("trr_lib", CallingConvention = CallingConvention.Cdecl)]
    private static extern void FreeText(IntPtr text);

    public event Action<string> OnCommandRecognized;

    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")]
    public bool autoStartListening = true;
    public bool debugMode = true;
    public float minSilenceDuration = 1.0f;

    private bool isListening = false;
    private string vadModelPath;
    private string asrModelPath;
    private float lastRecognitionTime;
    private int playerId;

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    private static int _controllerIdCounter = 0;

    void Awake()
    {
        playerId = _controllerIdCounter++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º ID –∏–≥—Ä–æ–∫–∞ –∫ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        gameObject.name = $"LocalVoiceController_Player{playerId}";
    }

    void Start()
    {
        vadModelPath = System.IO.Path.Combine(Application.streamingAssetsPath, "silero_vad.onnx");
        asrModelPath = System.IO.Path.Combine(Application.streamingAssetsPath, "asr_model.onnx");

        if (autoStartListening)
        {
            StartListening();
        }
    }

    void Update()
    {
        if (!isListening) return;

        ProcessTranscribedText();
    }

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
    /// </summary>
    public void StartListening()
    {
        if (isListening) return;

        try
        {
            StartTranscription(vadModelPath, asrModelPath);
            isListening = true;
            
            if (debugMode)
                Debug.Log($"üéôÔ∏è [Player{playerId}] –ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å...");
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå [Player{playerId}] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e.Message}");
        }
    }

    /// <summary>
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
    /// </summary>
    public void StopListening()
    {
        if (!isListening) return;

        try
        {
            StopTranscription();
            isListening = false;
            
            if (debugMode)
                Debug.Log($"‚èπÔ∏è [Player{playerId}] –ü–µ—Ä–µ—Å—Ç–∞—é —Å–ª—É—à–∞—Ç—å.");
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå [Player{playerId}] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e.Message}");
        }
    }

    /// <summary>
    /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    /// </summary>
    public void ToggleListening()
    {
        if (isListening)
            StopListening();
        else
            StartListening();
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    /// </summary>
    void ProcessTranscribedText()
    {
        while (HasTranscribedText())
        {
            IntPtr ptr = GetNextTranscribedText();
            if (ptr != IntPtr.Zero)
            {
                try
                {
                    string text = Marshal.PtrToStringAnsi(ptr);
                    FreeText(ptr);

                    if (!string.IsNullOrEmpty(text))
                    {
                        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥—ã
                        if (Time.time - lastRecognitionTime > minSilenceDuration)
                        {
                            ProcessRecognizedText(text.Trim());
                            lastRecognitionTime = Time.time;
                        }
                    }
                }
                catch (System.Exception e)
                {
                    Debug.LogError($"‚ùå [Player{playerId}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e.Message}");
                    FreeText(ptr); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                }
            }
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    /// </summary>
    void ProcessRecognizedText(string text)
    {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
        if (text.Length < 2) return;
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Å—Ç—ã—Ö –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        string lowerText = text.ToLower();
        if (lowerText.Contains("—Ö–º") || lowerText.Contains("—ç–º") || 
            lowerText.Contains("–∞–≥–∞") || lowerText.Contains("—É–≥—É"))
        {
            return;
        }

        if (debugMode)
            Debug.Log($"üó£Ô∏è [Player{playerId}] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{text}\"");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        OnCommandRecognized?.Invoke(text);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    /// </summary>
    public bool IsListening => isListening;

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public int GetPlayerId() => playerId;

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
    /// </summary>
    public void SetDebugMode(bool enabled)
    {
        debugMode = enabled;
        Debug.Log($"üêõ [Player{playerId}] –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {(enabled ? "–≤–∫–ª—é—á–µ–Ω" : "–æ—Ç–∫–ª—é—á–µ–Ω")}");
    }

    /// <summary>
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    /// </summary>
    public void SimulateCommand(string command)
    {
        if (string.IsNullOrEmpty(command)) return;
        
        Debug.Log($"üß™ [Player{playerId}] –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã: \"{command}\"");
        OnCommandRecognized?.Invoke(command);
    }

    void OnDestroy()
    {
        if (isListening)
        {
            StopListening();
        }
    }

    void OnApplicationPause(bool pauseStatus)
    {
        if (pauseStatus && isListening)
        {
            StopListening();
        }
        else if (!pauseStatus && autoStartListening)
        {
            StartListening();
        }
    }

    void OnApplicationFocus(bool hasFocus)
    {
        if (!hasFocus && isListening)
        {
            StopListening();
        }
        else if (hasFocus && autoStartListening)
        {
            StartListening();
        }
    }
}