using Photon.Pun;
using UnityEngine;

/// <summary>
/// –£–ª—É—á—à–µ–Ω–Ω—ã–π Detector —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
/// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å Gizmos.DrawWireCircle
/// </summary>
public class Detector : MonoBehaviourPun
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")]
    [SerializeField] private float viewRadius = 10f;
    [SerializeField] private float viewAngle = 360f;
    [SerializeField] public LayerMask targetMask;
    [SerializeField] public LayerMask obstacleMask;

    [Header("–ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [SerializeField] private bool enableVoiceReporting = true;
    [SerializeField] private AudioClip detectionSound;

    private bool canHit = false;
    private Transform lastDetectedTarget;
    private AudioSource audioSource;

    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    public System.Action<Transform> OnTargetDetected;
    public System.Action<Transform> OnTargetLost;
    public System.Action<Transform> OnCanHitChanged;

    void Start()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        audioSource = GetComponent<AudioSource>();
        if (audioSource == null && detectionSound != null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
            audioSource.playOnAwake = false;
            audioSource.spatialBlend = 1f; // 3D –∑–≤—É–∫
        }
    }

    void Update()
    {
        if (!photonView.IsMine) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π
        var currentTarget = DetectTargetAuth();
        
        if (currentTarget != lastDetectedTarget)
        {
            if (lastDetectedTarget != null && currentTarget == null)
            {
                // –¶–µ–ª—å –ø–æ—Ç–µ—Ä—è–Ω–∞
                OnTargetLost?.Invoke(lastDetectedTarget);
                if (enableVoiceReporting)
                {
                    Debug.Log($"üîç {gameObject.name} –ø–æ—Ç–µ—Ä—è–ª —Ü–µ–ª—å: {lastDetectedTarget.name}");
                }
            }
            else if (lastDetectedTarget == null && currentTarget != null)
            {
                // –ù–æ–≤–∞—è —Ü–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
                OnTargetDetected?.Invoke(currentTarget);
                PlayDetectionSound();
                if (enableVoiceReporting)
                {
                    Debug.Log($"üéØ {gameObject.name} –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ü–µ–ª—å: {currentTarget.name}");
                }
            }
            
            lastDetectedTarget = currentTarget;
        }
    }

    /// <summary>
    /// –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏)
    /// </summary>
    public Transform DetectTargetAuth()
    {
        if (!photonView.IsMine) return null;

        Transform unitTransform = null;
        Collider2D[] targetsInViewRadius = Physics2D.OverlapCircleAll(transform.position, viewRadius, targetMask);

        float closestDistance = float.MaxValue;
        Transform closestTarget = null;

        foreach (Collider2D c in targetsInViewRadius)
        {
            Vector2 dirToTarget = (c.transform.position - transform.position).normalized;
            float dist = Vector2.Distance(transform.position, c.transform.position);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≥–ª–∞ –æ–±–∑–æ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ 360¬∞)
            if (viewAngle < 360f)
            {
                float angle = Vector2.Angle(transform.up, dirToTarget);
                if (angle > viewAngle * 0.5f) continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
            RaycastHit2D hit = Physics2D.Raycast(transform.position, dirToTarget, dist, obstacleMask);
            
            var targetUnit = c.GetComponent<UnitsDefinition>();
            var myUnit = GetComponent<UnitsDefinition>();

            if (targetUnit != null && myUnit != null && hit.collider == null && targetUnit.GetTeam() != myUnit.GetTeam())
            {
                // –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–ª—å
                if (dist < closestDistance)
                {
                    closestDistance = dist;
                    closestTarget = c.transform;
                }
            }
        }

        return closestTarget;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö —Ü–µ–ª–µ–π (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥)
    /// </summary>
    public Transform[] DetectAllTargets()
    {
        if (!photonView.IsMine) return new Transform[0];

        var targets = new System.Collections.Generic.List<Transform>();
        Collider2D[] targetsInViewRadius = Physics2D.OverlapCircleAll(transform.position, viewRadius, targetMask);

        foreach (Collider2D c in targetsInViewRadius)
        {
            Vector2 dirToTarget = (c.transform.position - transform.position).normalized;
            float dist = Vector2.Distance(transform.position, c.transform.position);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≥–ª–∞ –æ–±–∑–æ—Ä–∞
            if (viewAngle < 360f)
            {
                float angle = Vector2.Angle(transform.up, dirToTarget);
                if (angle > viewAngle * 0.5f) continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
            RaycastHit2D hit = Physics2D.Raycast(transform.position, dirToTarget, dist, obstacleMask);
            
            var targetUnit = c.GetComponent<UnitsDefinition>();
            var myUnit = GetComponent<UnitsDefinition>();

            if (targetUnit != null && myUnit != null && hit.collider == null && targetUnit.GetTeam() != myUnit.GetTeam())
            {
                targets.Add(c.transform);
            }
        }

        return targets.ToArray();
    }

    /// <summary>
    /// –ü–æ–∏—Å–∫ —Ü–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥)
    /// </summary>
    public Transform DetectTargetByName(string targetName)
    {
        if (!photonView.IsMine) return null;

        var allTargets = DetectAllTargets();
        
        foreach (var target in allTargets)
        {
            var unitDef = target.GetComponent<UnitsDefinition>();
            if (unitDef != null && unitDef.GetUnitName().ToLower().Contains(targetName.ToLower()))
            {
                return target;
            }
        }

        return null;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
    /// </summary>
    public bool GetCanHitAuth() => photonView.IsMine && canHit;

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
    /// </summary>
    public int GetTargetCount()
    {
        return DetectAllTargets().Length;
    }

    /// <summary>
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    /// </summary>
    void PlayDetectionSound()
    {
        if (audioSource != null && detectionSound != null)
        {
            audioSource.PlayOneShot(detectionSound);
        }
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –æ–±–∑–æ—Ä–∞ (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥)
    /// </summary>
    public void SetViewRadius(float radius)
    {
        viewRadius = Mathf.Max(0f, radius);
        if (enableVoiceReporting)
        {
            Debug.Log($"üîç {gameObject.name} –∏–∑–º–µ–Ω–∏–ª —Ä–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞ –Ω–∞ {viewRadius}");
        }
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≥–ª–∞ –æ–±–∑–æ—Ä–∞ (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥)
    /// </summary>
    public void SetViewAngle(float angle)
    {
        viewAngle = Mathf.Clamp(angle, 0f, 360f);
        if (enableVoiceReporting)
        {
            Debug.Log($"üîç {gameObject.name} –∏–∑–º–µ–Ω–∏–ª —É–≥–æ–ª –æ–±–∑–æ—Ä–∞ –Ω–∞ {viewAngle}¬∞");
        }
    }

    // ===== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ COLLISION DETECTION =====

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (!photonView.IsMine) return;

        var targetUnit = collision.GetComponent<UnitsDefinition>();
        var myUnit = GetComponent<UnitsDefinition>();

        if (targetUnit != null && myUnit != null && targetUnit != myUnit)
        {
            bool wasCanHit = canHit;
            canHit = true;

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
            if (!wasCanHit)
            {
                OnCanHitChanged?.Invoke(collision.transform);
                if (enableVoiceReporting)
                {
                    Debug.Log($"‚öîÔ∏è {gameObject.name} –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å {collision.name}");
                }
            }
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (!photonView.IsMine) return;

        var targetUnit = collision.GetComponent<UnitsDefinition>();
        var myUnit = GetComponent<UnitsDefinition>();

        if (targetUnit != null && myUnit != null && targetUnit != myUnit)
        {
            bool wasCanHit = canHit;
            canHit = false;

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
            if (wasCanHit)
            {
                OnCanHitChanged?.Invoke(collision.transform);
                if (enableVoiceReporting)
                {
                    Debug.Log($"üõ°Ô∏è {gameObject.name} –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å {collision.name}");
                }
            }
        }
    }

    // ===== –ì–û–õ–û–°–û–í–´–ï –ö–û–ú–ê–ù–î–´ =====

    /// <summary>
    /// –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–ª—å
    /// </summary>
    public void VoiceCommand_FindNearestTarget()
    {
        var target = DetectTargetAuth();
        if (target != null)
        {
            Debug.Log($"üéØ –ë–ª–∏–∂–∞–π—à–∞—è —Ü–µ–ª—å: {target.name}");
            PlayDetectionSound();
        }
        else
        {
            Debug.Log($"üîç –¶–µ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã");
        }
    }

    /// <summary>
    /// –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–∞—Å—Ç—å
    /// </summary>
    public void VoiceCommand_ScanArea()
    {
        var targets = DetectAllTargets();
        Debug.Log($"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ü–µ–ª–µ–π: {targets.Length}");
        
        foreach (var target in targets)
        {
            var unitDef = target.GetComponent<UnitsDefinition>();
            string unitName = unitDef != null ? unitDef.GetUnitName() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            Debug.Log($"  - {unitName} –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ {Vector2.Distance(transform.position, target.position):F1}–º");
        }
    }

    /// <summary>
    /// –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞
    /// </summary>
    public void VoiceCommand_IncreaseRange()
    {
        SetViewRadius(viewRadius + 2f);
    }

    /// <summary>
    /// –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞
    /// </summary>
    public void VoiceCommand_DecreaseRange()
    {
        SetViewRadius(viewRadius - 2f);
    }

    // ===== –û–¢–õ–ê–î–ö–ê =====

    /// <summary>
    /// –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    /// </summary>
    public void SetVoiceReporting(bool enabled)
    {
        enableVoiceReporting = enabled;
        Debug.Log($"üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ {gameObject.name}: {(enabled ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã")}");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    /// </summary>
    public string GetDetectorStats()
    {
        var targets = DetectAllTargets();
        return $"–†–∞–¥–∏—É—Å: {viewRadius}, –£–≥–æ–ª: {viewAngle}¬∞, –¶–µ–ª–µ–π: {targets.Length}, –ú–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å: {canHit}";
    }

    // ===== –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –í –†–ï–î–ê–ö–¢–û–†–ï =====

    void OnDrawGizmosSelected()
    {
        // –†–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º DrawWireSphere –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, viewRadius);

        // –£–≥–æ–ª –æ–±–∑–æ—Ä–∞
        if (viewAngle < 360f)
        {
            Vector3 forward = transform.up;
            float halfAngle = viewAngle * 0.5f;
            
            Vector3 leftBoundary = Quaternion.Euler(0, 0, halfAngle) * forward * viewRadius;
            Vector3 rightBoundary = Quaternion.Euler(0, 0, -halfAngle) * forward * viewRadius;
            
            Gizmos.color = Color.green;
            Gizmos.DrawLine(transform.position, transform.position + leftBoundary);
            Gizmos.DrawLine(transform.position, transform.position + rightBoundary);
        }

        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
        if (Application.isPlaying)
        {
            var targets = DetectAllTargets();
            Gizmos.color = Color.red;
            foreach (var target in targets)
            {
                Gizmos.DrawLine(transform.position, target.position);
                Gizmos.DrawWireCube(target.position, Vector3.one * 0.5f);
            }
        }
    }
}