using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// –£–ª—É—á—à–µ–Ω–Ω—ã–π UnitsDefinition —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
/// –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ –∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
/// </summary>
public class UnitsDefinition : MonoBehaviour
{
    [Header("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
    [SerializeField] private string nameUnit = "–Æ–Ω–∏—Ç";
    [SerializeField] private CollorTeam collorTeam = CollorTeam.Red;

    [Header("–ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [SerializeField] private string voiceName = ""; // –ò–º—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    [SerializeField] private bool canReceiveVoiceCommands = true;
    [SerializeField] private AudioClip[] statusReportClips;

    [Header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
    [SerializeField] private float maxHealth = 100f;
    [SerializeField] private float currentHealth = 100f;

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    private AudioSource audioSource;
    private EnemyController enemyController;

    // –°–æ–±—ã—Ç–∏—è
    public System.Action<string> OnVoiceNameChanged;
    public System.Action<CollorTeam> OnTeamChanged;
    public System.Action<float> OnHealthChanged;

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    private Dictionary<string, object> customProperties = new Dictionary<string, object>();

    void Awake()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        audioSource = GetComponent<AudioSource>();
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
            audioSource.playOnAwake = false;
            audioSource.spatialBlend = 1f; // 3D –∑–≤—É–∫
        }

        enemyController = GetComponent<EnemyController>();

        // –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–º—è
        if (string.IsNullOrEmpty(voiceName))
        {
            voiceName = nameUnit.ToLower();
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è
        currentHealth = maxHealth;
    }

    void Start()
    {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        RegisterInVoiceSystem();
    }

    /// <summary>
    /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é–Ω–∏—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    /// </summary>
    void RegisterInVoiceSystem()
    {
        if (!canReceiveVoiceCommands) return;

        // –ü–æ–∏—Å–∫ VoiceSystemManager –≤–ª–∞–¥–µ–ª—å—Ü–∞
        var players = FindObjectsOfType<PlayerController>();
        foreach (var player in players)
        {
            var photonView = GetComponent<Photon.Pun.PhotonView>();
            var playerPhotonView = player.GetComponent<Photon.Pun.PhotonView>();
            
            if (photonView != null && playerPhotonView != null && 
                photonView.Owner == playerPhotonView.Owner)
            {
                var voiceManager = player.GetComponent<VoiceSystemManager>();
                if (voiceManager != null && enemyController != null)
                {
                    Debug.Log($"üé§ {nameUnit} ({voiceName}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ");
                    break;
                }
            }
        }
    }

    // ===== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —é–Ω–∏—Ç–∞
    /// </summary>
    public string GetUnitName()
    {
        return nameUnit;
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —é–Ω–∏—Ç–∞
    /// </summary>
    public void SetTeam(CollorTeam team)
    {
        if (collorTeam != team)
        {
            collorTeam = team;
            OnTeamChanged?.Invoke(team);
            Debug.Log($"üè≥Ô∏è {nameUnit} —Å–º–µ–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É –Ω–∞ {team}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —é–Ω–∏—Ç–∞
    /// </summary>
    public CollorTeam GetTeam()
    {
        return collorTeam;
    }

    // ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ =====

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–º—è —é–Ω–∏—Ç–∞
    /// </summary>
    public string GetVoiceName()
    {
        return voiceName;
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–º—è
    /// </summary>
    public void SetVoiceName(string newVoiceName)
    {
        if (voiceName != newVoiceName)
        {
            voiceName = newVoiceName;
            OnVoiceNameChanged?.Invoke(newVoiceName);
            Debug.Log($"üéôÔ∏è {nameUnit} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–º—è: {newVoiceName}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    /// </summary>
    public float GetCurrentHealth()
    {
        return currentHealth;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    /// </summary>
    public float GetMaxHealth()
    {
        return maxHealth;
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
    /// </summary>
    public void SetHealth(float health)
    {
        float newHealth = Mathf.Clamp(health, 0f, maxHealth);
        if (currentHealth != newHealth)
        {
            currentHealth = newHealth;
            OnHealthChanged?.Invoke(currentHealth);
            
            if (currentHealth <= 0)
            {
                Debug.Log($"üíÄ {nameUnit} —É–Ω–∏—á—Ç–æ–∂–µ–Ω");
                PlayStatusReport("–Æ–Ω–∏—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω!");
            }
            else if (currentHealth < maxHealth * 0.3f)
            {
                Debug.Log($"ü©π {nameUnit} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–Ω–µ–Ω ({currentHealth:F0}/{maxHealth:F0})");
                PlayStatusReport("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è!");
            }
        }
    }

    /// <summary>
    /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
    /// </summary>
    public void Heal(float amount)
    {
        SetHealth(currentHealth + amount);
        if (amount > 0)
        {
            Debug.Log($"üíö {nameUnit} –ª–µ—á–∏—Ç—Å—è –Ω–∞ {amount} HP");
            PlayStatusReport("–ü–æ–ª—É—á–∞—é –ª–µ—á–µ–Ω–∏–µ!");
        }
    }

    /// <summary>
    /// –ù–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω
    /// </summary>
    public void TakeDamage(float damage)
    {
        SetHealth(currentHealth - damage);
        if (damage > 0)
        {
            Debug.Log($"üí• {nameUnit} –ø–æ–ª—É—á–∏–ª {damage} —É—Ä–æ–Ω–∞");
            PlayStatusReport("–ü–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω!");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è
    /// </summary>
    public float GetHealthPercentage()
    {
        return maxHealth > 0 ? (currentHealth / maxHealth) * 100f : 0f;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∂–∏–≤ –ª–∏ —é–Ω–∏—Ç
    /// </summary>
    public bool IsAlive()
    {
        return currentHealth > 0;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ —é–Ω–∏—Ç –ø–æ–ª—É—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    /// </summary>
    public bool CanReceiveVoiceCommands()
    {
        return canReceiveVoiceCommands && IsAlive();
    }

    /// <summary>
    /// –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    /// </summary>
    public void SetVoiceCommandsEnabled(bool enabled)
    {
        canReceiveVoiceCommands = enabled;
        Debug.Log($"üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {nameUnit}: {(enabled ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã")}");
    }

    /// <summary>
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ
    /// </summary>
    void PlayStatusReport(string message)
    {
        if (statusReportClips != null && statusReportClips.Length > 0 && audioSource != null)
        {
            AudioClip clip = statusReportClips[Random.Range(0, statusReportClips.Length)];
            audioSource.PlayOneShot(clip);
        }

        Debug.Log($"üì¢ {nameUnit}: {message}");
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    /// </summary>
    public void SetCustomProperty(string key, object value)
    {
        customProperties[key] = value;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    /// </summary>
    public T GetCustomProperty<T>(string key, T defaultValue = default(T))
    {
        if (customProperties.ContainsKey(key) && customProperties[key] is T)
        {
            return (T)customProperties[key];
        }
        return defaultValue;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ
    /// </summary>
    public string GetFullInfo()
    {
        return $"{nameUnit} ({voiceName}) - –ö–æ–º–∞–Ω–¥–∞: {collorTeam}, " +
               $"–ó–¥–æ—Ä–æ–≤—å–µ: {currentHealth:F0}/{maxHealth:F0} ({GetHealthPercentage():F1}%), " +
               $"–ì–æ–ª–æ—Å: {(canReceiveVoiceCommands ? "–í–∫–ª" : "–í—ã–∫–ª")}";
    }

    // ===== –ì–û–õ–û–°–û–í–´–ï –ö–û–ú–ê–ù–î–´ =====

    /// <summary>
    /// –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –¥–æ–ª–æ–∂–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    /// </summary>
    public void VoiceCommand_ReportStatus()
    {
        string status = $"–ó–¥–æ—Ä–æ–≤—å–µ {GetHealthPercentage():F0}%, –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–∏–∫–∞–∑–æ–≤";
        PlayStatusReport(status);
    }

    void OnDestroy()
    {
        Debug.Log($"üóëÔ∏è {nameUnit} ({voiceName}) —É–Ω–∏—á—Ç–æ–∂–µ–Ω");
    }
}