using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using System;

/// <summary>
/// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SpawnDetector —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
/// –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å VoiceSystemManager
/// </summary>
public class SpawnDetector : MonoBehaviourPun
{
    private bool spawnAllowed = false;
    private SpawnUnits spawnUnits;
    private readonly List<int> myUnitViewIds = new List<int>();

    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    public event Action<GameObject> OnUnitSpawned;
    public event Action<GameObject> OnUnitDestroyed;

    void OnTriggerEnter2D(Collider2D col)
    {
        if (col.CompareTag("Spawner"))
        {
            if (!photonView.IsMine && PhotonNetwork.IsConnected) return;
            spawnAllowed = true;
            spawnUnits = col.GetComponent<SpawnUnits>();
        }
    }

    void OnTriggerExit2D(Collider2D col)
    {
        if (col.CompareTag("Spawner"))
        {
            if (!photonView.IsMine && PhotonNetwork.IsConnected) return;
            spawnAllowed = false;
            spawnUnits = null;
        }
    }

    public bool getSpawnAllowed() => spawnAllowed;

    /// <summary>
    /// RPC –¥–ª—è —Å–ø–∞–≤–Ω–∞ —é–Ω–∏—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    /// </summary>
    [PunRPC]
    void RPC_SpawnMob(int teamId, string prefabName, Vector3 pos, PhotonMessageInfo info)
    {
        if (!PhotonNetwork.IsMasterClient) return;

        var unit = PhotonNetwork.Instantiate(prefabName, pos, Quaternion.identity);
        unit.GetComponent<UnitsDefinition>()?.SetTeam((CollorTeam)teamId);

        var pv = unit.GetComponent<PhotonView>();
        Player requester = PhotonNetwork.CurrentRoom?.GetPlayer(info.Sender.ActorNumber);

        if (pv != null && requester != null) 
        {
            pv.TransferOwnership(requester);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–ø–∞–≤–Ω–µ —é–Ω–∏—Ç–∞
            photonView.RPC(nameof(RPC_RegisterUnit), RpcTarget.All, pv.ViewID, info.Sender.ActorNumber);
        }
    }

    /// <summary>
    /// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é–Ω–∏—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
    /// </summary>
    [PunRPC]
    void RPC_RegisterUnit(int unitViewId, int ownerActorNumber)
    {
        if (photonView.Owner != null && photonView.Owner.ActorNumber == ownerActorNumber)
        {
            if (!myUnitViewIds.Contains(unitViewId))
            {
                myUnitViewIds.Add(unitViewId);
                
                // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç —é–Ω–∏—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ
                var unitPV = PhotonView.Find(unitViewId);
                if (unitPV != null)
                {
                    var unitObj = unitPV.gameObject;
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–ø–∞–≤–Ω–µ —é–Ω–∏—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
                    OnUnitSpawned?.Invoke(unitObj);
                    
                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —é–Ω–∏—Ç–∞
                    var unitFSM = unitObj.GetComponent<UnitFSM>();
                    if (unitFSM != null)
                    {
                        unitFSM.OnUnitDestroyed += () => {
                            OnUnitDestroyed?.Invoke(unitObj);
                            myUnitViewIds.Remove(unitViewId);
                        };
                    }
                }
            }
        }
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    /// </summary>
    public void CmdFollowMe(string unitName, int ownerViewId)
    {
        ExecuteUnitCommand(unitName, (pv, def) => 
        {
            pv.RPC("RPC_SetMainTarget", pv.Owner, ownerViewId);
            Debug.Log($"üéØ {def.GetUnitName()} —Ç–µ–ø–µ—Ä—å —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–æ–º");
        });
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    /// </summary>
    public void CmdStopFollow(string unitName)
    {
        ExecuteUnitCommand(unitName, (pv, def) => 
        {
            pv.RPC("RPC_DeleteMainTarget", pv.Owner);
            Debug.Log($"‚èπÔ∏è {def.GetUnitName()} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        });
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –∞—Ç–∞–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    /// </summary>
    public void CmdAttackEnemy(string unitName)
    {
        ExecuteUnitCommand(unitName, (pv, def) => 
        {
            pv.RPC("RPC_SetTargetEnemyAuto", pv.Owner);
            Debug.Log($"‚öîÔ∏è {def.GetUnitName()} –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–∞");
        });
    }

    /// <summary>
    /// –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ (–¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥)
    /// </summary>
    public void CmdMoveToPoint(string unitName, string pointName)
    {
        ExecuteUnitCommand(unitName, (pv, def) => 
        {
            pv.RPC("RPC_MoveToPoint", pv.Owner, pointName);
            Debug.Log($"üö∂ {def.GetUnitName()} –¥–≤–∏–∂–µ—Ç—Å—è –∫ {pointName}");
        });
    }

    /// <summary>
    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —é–Ω–∏—Ç–∞
    /// </summary>
    private void ExecuteUnitCommand(string unitName, System.Action<PhotonView, UnitsDefinition> action)
    {
        foreach (int id in myUnitViewIds)
        {
            var pv = PhotonView.Find(id);
            if (pv == null) continue;

            var def = pv.GetComponent<UnitsDefinition>();
            if (def != null && def.GetUnitName().ToLower().Contains(unitName.ToLower()))
            {
                action(pv, def);
                return;
            }
        }
        
        Debug.LogWarning($"‚ö†Ô∏è –Æ–Ω–∏—Ç —Å –∏–º–µ–Ω–µ–º '{unitName}' –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public List<GameObject> GetMyUnits()
    {
        var units = new List<GameObject>();
        
        foreach (int id in myUnitViewIds)
        {
            var pv = PhotonView.Find(id);
            if (pv != null)
            {
                units.Add(pv.gameObject);
            }
        }
        
        return units;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —é–Ω–∏—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public int GetUnitCount() => myUnitViewIds.Count;

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —é–Ω–∏—Ç —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É
    /// </summary>
    public bool IsMyUnit(int viewId) => myUnitViewIds.Contains(viewId);
}